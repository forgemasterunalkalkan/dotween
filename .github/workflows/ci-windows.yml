name: CI-Windows

on:
  push:
    branches: [ develop ]

env:
  UNITY_EDITOR_BASE_PATH: C:\Program Files\Unity\Hub\Editor

jobs:
  windows:
    runs-on: windows-latest

    strategy:
      matrix:
        unity:
          [
            { version: 2020.3.17f1, hash: a4537701e4ab },
          ]

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Set Unity editor path variable
        run: echo "UNITY_EDITOR_PATH=${{ env.UNITY_EDITOR_BASE_PATH }}\${{ matrix.unity.version }}" >> $Env:GITHUB_ENV
        shell: pwsh

      - name: Replace UnityVersion value in Directory.Build.Props files
        run: |
          $filePaths = @(
              '_DOTween.Assembly/Directory.Build.Props'
          )

          foreach ($filePath in $filePaths) {
              $fileContent = Get-Content $filePath -Encoding UTF8 -Raw
              $fileContent = $fileContent -replace '<UnityVersion>(.*)</UnityVersion>', '<UnityVersion>${{ matrix.unity.version }}</UnityVersion>'

              Set-Content -Encoding UTF8 $filePath -Value $fileContent -NoNewline

              Write-Output "$($filePath): '$fileContent'"
          }
        shell: pwsh

      - name: Enable Unity Cache Support
        id: cache-unity
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-unitycache-${{ matrix.unity.version }}
          path: UnityCache

      - name: Download Unity
        if: steps.cache-unity.outputs.cache-hit != 'true'
        run: bitsadmin /TRANSFER unity /DOWNLOAD /PRIORITY foreground "https://download.unity3d.com/download_unity/${{ matrix.unity.hash }}/Windows64EditorInstaller/UnitySetup64-${{ matrix.unity.version }}.exe" "%CD%\unitysetup.exe"
        shell: cmd

      - name: Install Unity
        if: steps.cache-unity.outputs.cache-hit != 'true'
        run: unitysetup.exe /UI=reduced /S /D=${{ env.UNITY_EDITOR_PATH }}
        shell: cmd

      - name: Prepare Managed Cache
        if: steps.cache-unity.outputs.cache-hit != 'true'
        run: Copy-Item -Path "${{ env.UNITY_EDITOR_PATH }}\Editor\Data\Managed" -Destination "UnityCache\Managed" -Recurse
        shell: pwsh

      - name: Prepare MonoBleedingEdge Cache
        if: steps.cache-unity.outputs.cache-hit != 'true'
        run: Copy-Item -Path "${{ env.UNITY_EDITOR_PATH }}\Editor\Data\MonoBleedingEdge" -Destination "UnityCache\MonoBleedingEdge" -Recurse
        shell: pwsh

      - name: Prepare GUISystem Cache
        if: ${{ (startsWith(matrix.unity.version, '5.6') || startsWith(matrix.unity.version, '2017') || startsWith(matrix.unity.version, '2018') || startsWith(matrix.unity.version, '2019.1') || startsWith(matrix.unity.version, '2019.2')) && steps.cache-unity.outputs.cache-hit != 'true' }}
        run: Copy-Item -Path "${{ env.UNITY_EDITOR_PATH }}\Editor\Data\UnityExtensions\Unity\GUISystem" -Destination "UnityCache\GUISystem" -Recurse
        shell: pwsh

      - name: Restore Managed Cache
        if: steps.cache-unity.outputs.cache-hit == 'true'
        run: Copy-Item -Path "UnityCache\Managed" -Destination "${{ env.UNITY_EDITOR_PATH }}\Editor\Data\Managed" -Recurse
        shell: pwsh

      - name: Restore MonoBleedingEdge Cache
        if: steps.cache-unity.outputs.cache-hit == 'true'
        run: Copy-Item -Path "UnityCache\MonoBleedingEdge" -Destination "${{ env.UNITY_EDITOR_PATH }}\Editor\Data\MonoBleedingEdge" -Recurse
        shell: pwsh

      - name: Restore GUISystem Cache
        if: ${{ (startsWith(matrix.unity.version, '5.6') || startsWith(matrix.unity.version, '2017') || startsWith(matrix.unity.version, '2018') || startsWith(matrix.unity.version, '2019.1') || startsWith(matrix.unity.version, '2019.2')) && steps.cache-unity.outputs.cache-hit == 'true' }}
        run: Copy-Item -Path "UnityCache\GUISystem" -Destination "${{ env.UNITY_EDITOR_PATH }}\Editor\Data\UnityExtensions\Unity\GUISystem" -Recurse
        shell: pwsh

      - name: Build DOTween
        run: dotnet build -c Release _DOTween.Assembly/DOTween/DOTween.csproj
        shell: pwsh

      - name: Build DOTweenEditor
        run: dotnet build -c Release _DOTween.Assembly/DOTweenEditor/DOTweenEditor.csproj
        shell: pwsh

      # UnityEngine.UI.dll can only be referenced up to Unity 2019.2, after that version it does not come installed with the editor.
      - name: Build DOTween_LooseScripts
        if: ${{ startsWith(matrix.unity.version, '5.6') || startsWith(matrix.unity.version, '2017') || startsWith(matrix.unity.version, '2018') || startsWith(matrix.unity.version, '2019.1') || startsWith(matrix.unity.version, '2019.2') }}
        run: dotnet build -c Release _DOTween.Assembly/DOTween_LooseScripts/DOTween_LooseScripts.csproj
        shell: pwsh

      - name: Replace if true to false in the modules to use the version defines in package
        run: |
          foreach ($filePath in [System.IO.Directory]::GetFiles("Package/DOTween/Modules", "*.cs", [System.IO.SearchOption]::TopDirectoryOnly)) {
              $fileContent = Get-Content $filePath -Encoding UTF8 -Raw
              $fileContent = $fileContent -replace '#if (\(?)true', '#if $1false'

              Set-Content -Encoding UTF8 $filePath -Value $fileContent -NoNewline

              Write-Output "$($filePath): '$fileContent'"
          }
        shell: pwsh

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        if: ${{ !startsWith(matrix.unity.version, '5.6') && !startsWith(matrix.unity.version, '2017') && !startsWith(matrix.unity.version, '2018') }}
        with:
          name: Package-${{ matrix.unity.version }}
          path: Package
          retention-days: 1
